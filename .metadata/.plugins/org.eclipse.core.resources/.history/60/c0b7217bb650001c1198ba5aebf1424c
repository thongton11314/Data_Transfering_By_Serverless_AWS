package css436lab4;

import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.amazonaws.services.dynamodbv2.document.*;
import com.amazonaws.services.dynamodbv2.document.spec.QuerySpec;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;
import com.amazonaws.services.dynamodbv2.xspec.ScanExpressionSpec;

import java.io.InputStream;
import java.net.URL;
import java.util.*;

public class MainProcess {

    // Main build
    private static MainProcess BUILD;

    // Dynamo table
    private static AmazonDynamoDB CLIENT;

    // Use to work with table in AWS DynamoDB
    private Table DBTable;    
    private final int ATTRIBUTE = 0;
    private final int VALUE = 1;
        
    // Connect to AWS DynamoDB
    private MainProcess(LambdaLogger logger) {
    	try {
	        CLIENT = AmazonDynamoDBClientBuilder
	                    .standard()
	                    .withCredentials(new DefaultAWSCredentialsProviderChain())
	                    .build();
			logger.log("Build credential successful\n");
    	} catch (Exception e) {
			logger.log("Build credential Fail\n");
    	}
    }

    // Build
    public static MainProcess build(LambdaLogger lambdaLogger) {
        if (BUILD == null) {
            BUILD = new MainProcess(lambdaLogger);
        }
        return BUILD;
    }

    // Set up table
    public void setUpTable(String nameTable, LambdaLogger logger) {
        try {
        	DBTable = new Table(CLIENT, nameTable);
			logger.log("Set up table successful\n");
		} catch (Exception e) {
			logger.log("Set up table fail\n");
		}
    }
    
    // Load Data
    public boolean loadData(String dataURL, String primaryKey, String secondaryKey, LambdaLogger logger) {
        try {
            logger.log("Loading process...\n");
            
            // Access to the lambda by URL link
            URL dataInPage = new URL(dataURL);
            
            // Get all the data in the link
            InputStream stream = dataInPage.openStream();
            Scanner scanner = new Scanner(stream);
            logger.log("Achieving data from URL:" + dataInPage.toString() + "\n");
            logger.log("Table Name: " + DBTable.getTableName() + "\n");
            int count = 1;
            while (scanner.hasNextLine()) {
            	String curLine = scanner.nextLine();

                // Check if more data to read
                if (curLine.isEmpty()) {
                    break;
                }
                
                // AWS DynamoDB Item
                Item itemToPut = doFormatData(curLine, primaryKey, secondaryKey);
                
                // Insert item into table
                DBTable.putItem(itemToPut);
                logger.log("Put item: " + itemToPut.toJSON() + "\n");
                
                //DBTable.putItem(itemToPut);
            	count++;
            	
            }
            scanner.close();
            logger.log("Put " + count + " item(s) into AWS DynamoDB sucessfull\n");
            return true;
        } catch (Exception e) {
            logger.log(e.getMessage());
            return false;
        }
    }

    // Format Data
    private Item doFormatData(String curLine, String primaryKey, String secondaryKey) {

        // Tokenize the data by space
        curLine = curLine.replaceAll("\\s+", " ");
        List<String> listOfAttribute = Arrays.asList(curLine.trim().split("\\s+"));
        List<String> rawData = new ArrayList<String>(listOfAttribute);

        // Use to achieve the formatted data
        Item formattedData = new Item();

        // Get last name and first name
        // String.withString(Key, Value)
        formattedData.withString(primaryKey, rawData.get(0));
        formattedData.withString(secondaryKey, rawData.get(1));

        // Get the rest of attribute
        for (int i = 2; i < rawData.size(); i++) {

            // Tokenize key and value
            String[] attributeAndValue = rawData.get(i).trim().split("=");
            formattedData.withString(attributeAndValue[ATTRIBUTE], attributeAndValue[VALUE]);
        }
        return formattedData;
    }

    // Query for many case 
    public String queryData(Map<String, String> request, String pKey, String sKey, LambdaLogger logger) {
        String firstName = request.get(sKey);
        String lastName = request.get(pKey);
        
        
        // Both empty 
        if ((firstName.isEmpty() || firstName.isBlank() || firstName == null || firstName.trim() == "")
        	&& (lastName.isEmpty() || lastName.isBlank() || lastName == null || lastName.trim() == "")) {
        	logger.log("Received empty names \n");
        	return queryEmpty(pKey, sKey, logger);
        }
        
        // First name empty, check last name
        if (firstName.isEmpty() || firstName.isBlank() || firstName == null || firstName.trim() == "") {
        	logger.log("Received ony last name \n");
        	return queryLastName(pKey, sKey, lastName, logger);
        }
        
        // Last name empty, check first name
        if (lastName.isEmpty() || lastName.isBlank() || lastName == null || lastName.trim() == "") {
        	logger.log("Received ony first name \n");
        	return queryFirstName(pKey, sKey, firstName, logger);
        }
        
        // Both names fill
    	logger.log("Received " + lastName  + " " + firstName + "\n");
        return queryBoth(pKey, lastName, sKey, firstName, logger);
    }
    
    /**
     * 
     * @param pKey
     * @param sKey
     * @param logger
     * @see https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ScanJavaDocumentAPI.html
     * @return
     */
    private String queryEmpty(String pKey, String sKey, LambdaLogger logger) {
    	try {
	    	JsonArray result = new JsonArray();

	    	ScanRequest scanRequest = new ScanRequest()
	    		    .withTableName(DBTable.getTableName());
	    	ScanResult allItems = CLIENT.scan(scanRequest);
	    	logger.log("Retrieve all items \n");
	    	for (Map<String, AttributeValue> item : allItems.getItems()){
	    		 Item newItem = new Item().withJSON("document", item);
	    	}
	    	return result.toString();
	    }
    	catch (Exception e) {
    		logger.log(e.getMessage() +"\n");
    		return "";
    	}
    }
    
    private String queryBoth(String pKey, String lName, String sKey, String fName, LambdaLogger logger) {
    	try {
	        Item result = DBTable.getItem(pKey, lName, sKey, fName);
	        if (result == null) {
	            logger.log("No record of " + lName + " " + fName + "\n");
	            return "No record was found for " + lName + " " + fName + "\n";
	        }
	        return result.toJSON();
    	} catch (Exception e) {
    		return e.getMessage();
    	}
    }
    
    // Follow template AWS document
    private String queryLastName(String pKey, String sKey, String lName, LambdaLogger logger) {
    	String attribute = pKey;
        String value = ":" + lName;
        JsonArray result = new JsonArray();
        PrimaryKey currentEvaluatedKey = null;
        
        logger.log("In query last name 1 \n");
        // Query all objec that match the last name
        do {
        	
        	// Create object to query
	        Map<String, Object> attributeAndValues = new HashMap<>();
	        attributeAndValues.put(value, lName);
	        
	        // Create object to query in DynamoDB
	        QuerySpec query = new QuerySpec().withKeyConditionExpression(attribute + " = " + value)
	                						.withValueMap(attributeAndValues)
	                						.withExclusiveStartKey(currentEvaluatedKey);
        	
	        logger.log("In query last name 2 \n");
	        // Get object match in table
	        ItemCollection<QueryOutcome> anQueryItem;
            query = query.withConsistentRead(true);
            anQueryItem = DBTable.query(query);
            
        	logger.log("In query last name 3 \n");
            // Format Item
            JsonArray anObjectMatch = formatQueryItem(anQueryItem);
            
            // Add item into list of json
            result.addAll(anObjectMatch);

        	logger.log("In query last name 4 \n");
            // using the same key for the next search
        	// Prepare for next search
            Map<String, AttributeValue> lastEvaluatedKey = anQueryItem
            										.getLastLowLevelResult()
								                    .getQueryResult()
								                    .getLastEvaluatedKey();
            
           
        	logger.log("In query last name 5 \n");
            if (lastEvaluatedKey == null) {
            	currentEvaluatedKey = null;
            }
            else {
            currentEvaluatedKey = new PrimaryKey(pKey, lastEvaluatedKey.get(pKey).getS(),
                    							sKey, lastEvaluatedKey.get(sKey).getS());
            }
        }
        while (currentEvaluatedKey != null);
        
        // Return a list of object match with last name
    	return result.toString();
    }
    
    // Follow template AWS document
    private String queryFirstName(String pKey, String sKey, String fName, LambdaLogger logger) {
    	String attribute = sKey;
        String value = ":" + fName;
        JsonArray result = new JsonArray();
        PrimaryKey currentEvaluatedKey = null;
        
        logger.log("In query first name 1 \n");
        // Query all objec that match the last name
        do {
        	
        	// Create object to query
	        Map<String, Object> attributeAndValues = new HashMap<>();
	        attributeAndValues.put(value, fName);
	        
	        // Create object to query in DynamoDB
	        QuerySpec query = new QuerySpec().withKeyConditionExpression(attribute + " = " + value)
	                						.withValueMap(attributeAndValues)
	                						.withExclusiveStartKey(currentEvaluatedKey);
        	
	        logger.log("In query first name 2 \n");
	        // Get object match in table
	        ItemCollection<QueryOutcome> anQueryItem;
            Index fNameIndex = DBTable.getIndex(pKey + "-" + sKey + "-" + "index");
            anQueryItem = fNameIndex.query(query);
            
        	logger.log("In query first name 3 \n");
            // Format Item
            JsonArray anObjectMatch = formatQueryItem(anQueryItem);
            
            // Add item into list of json
            result.addAll(anObjectMatch);

        	logger.log("In query first name 4 \n");
            // using the same key for the next search
        	// Prepare for next search
            Map<String, AttributeValue> lastEvaluatedKey = anQueryItem
            										.getLastLowLevelResult()
								                    .getQueryResult()
								                    .getLastEvaluatedKey();
            
           
        	logger.log("In query first name 5 \n");
            if (lastEvaluatedKey == null) {
            	currentEvaluatedKey = null;
            }
            else {
            currentEvaluatedKey = new PrimaryKey(sKey, lastEvaluatedKey.get(sKey).getS(),
                    							pKey, lastEvaluatedKey.get(pKey).getS());
            }
        }
        while (currentEvaluatedKey != null);
        
        // Return a list of object match with last name
    	return result.toString();
    }
    
    // Follow template AWS document
	private JsonArray formatQueryItem(ItemCollection<QueryOutcome> anQueryItem) {
	    JsonParser parser = new JsonParser();
	    JsonArray parsedResult = new JsonArray();
	    for (Item item : anQueryItem) {
	        parsedResult.add(parser.parse(item.toJSONPretty()).getAsJsonObject());
	    }
	    return parsedResult;
	}
}